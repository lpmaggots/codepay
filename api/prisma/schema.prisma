generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  accounts Account[]
}

model AccountType {
  id          String    @id @default(uuid())
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  accounts Account[]
}

model Account {
  id            String      @id @default(uuid())
  number        String
  balance       Float
  userId        String
  institutionId String
  typeId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  type        AccountType @relation(fields: [typeId], references: [id])
  transactions Transaction[]
}

model TransactionType {
  id          String       @id @default(uuid())
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  transactions Transaction[]
}

model TransactionCategory {
  id          String       @id @default(uuid())
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  transactions Transaction[]
}

model Transaction {
  id         String               @id @default(uuid())
  typeId     String
  categoryId String
  amount     Float
  description String
  date       DateTime @default(now())
  accountId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  account  Account             @relation(fields: [accountId], references: [id])
  type     TransactionType     @relation(fields: [typeId], references: [id])
  category TransactionCategory @relation(fields: [categoryId], references: [id])
}

model InstitutionType {
  id          String     @id @default(uuid())
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())

  institutions Institution[]
}

model Institution {
  id        String    @id @default(uuid())
  ispb      String
  website   String?
  typeId    String
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  type     InstitutionType @relation(fields: [typeId], references: [id])
  accounts Account[]
}